unit uAccessReport;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, W7Classes, W7Panels, AdvOfficeTabSet,
  AdvOfficeTabSetStylers, AdvSmoothPanel, Vcl.ExtCtrls, AdvSmoothLabel,
  Vcl.StdCtrls, AdvEdit, Vcl.Buttons, Vcl.Grids, AdvObj, BaseGrid, AdvGrid,
  AdvToolBtn,ADODB,ActiveX, uSubForm, CommandArray, AdvCombo, AdvGroupBox,
  Vcl.Mask, AdvSpin, AdvOfficeButtons, AdvPanel, Vcl.ComCtrls, AdvListV,
  Vcl.ImgList, Vcl.Menus, AdvMenus, AdvExplorerTreeview, paramtreeview,
  System.iniFiles, Vcl.Samples.Gauges,
  AdvSmoothTabPager, AdvGlassButton, AdvEdBtn, AdvToolBar, AdvToolBarStylers,
  Vcl.Imaging.pngimage, AdvGlowButton, AdvOfficePager, AdvAppStyler,
  AdvOfficePagerStylers;


const
  con_LocalCompanyImageIndex = 0;
  con_LocalEmployeeImageIndex = 1;
  con_LocalBuildingImageIndex = 2;

type
  TfmAccessReport = class(TfmASubForm)
    BodyPanel: TAdvSmoothPanel;
    lb_SearchETCName: TAdvSmoothLabel;
    ImageList1: TImageList;
    pop_PermitAdd: TAdvPopupMenu;
    mn_addpermitListDelete: TMenuItem;
    toolslist: TImageList;
    ed_name: TAdvEdit;
    sg_report: TAdvStringGrid;
    SaveDialog1: TSaveDialog;
    pan_gauge: TPanel;
    Label1: TLabel;
    Gauge1: TGauge;
    lb_BuildingName: TAdvSmoothLabel;
    cmb_DoorBuildingAreaCode: TAdvComboBox;
    lb_SearchDate: TAdvSmoothLabel;
    AdvSmoothLabel2: TAdvSmoothLabel;
    dt_endDate: TDateTimePicker;
    dt_StartDate: TDateTimePicker;
    lb_DoorName: TAdvSmoothLabel;
    lb_CompanyName: TAdvSmoothLabel;
    lb_PosiName: TAdvSmoothLabel;
    cmb_CardBuildingCode: TAdvComboBox;
    lb_empType: TAdvSmoothLabel;
    cmb_CardBuildingAreaCode: TAdvComboBox;
    lb_EtcSearch: TAdvSmoothLabel;
    cmb_StartHH: TAdvComboBox;
    lb_StartHH: TAdvSmoothLabel;
    cmb_StartMM: TAdvComboBox;
    lb_StartMM: TAdvSmoothLabel;
    AdvSmoothLabel18: TAdvSmoothLabel;
    cmb_EndHH: TAdvComboBox;
    lb_EndHH: TAdvSmoothLabel;
    cmb_EndMM: TAdvComboBox;
    lb_EndMM: TAdvSmoothLabel;
    pan_Option: TAdvSmoothPanel;
    MenuImageList16: TImageList;
    lb_SearchOption: TLabel;
    AdvOfficePager1: TAdvOfficePager;
    AdvOfficePage1: TAdvOfficePage;
    btn_minimize: TAdvGlowButton;
    btn_Close: TAdvGlowButton;
    btn_Excel: TAdvGlowButton;
    btn_Print: TAdvGlowButton;
    btn_Option: TAdvGlowButton;
    btn_Search: TAdvGlowButton;
    lb_List: TLabel;
    gb_SearchOption: TAdvOfficeCheckGroup;
    btn_OptionSave: TAdvGlowButton;
    btn_OptionCancel: TAdvGlowButton;
    AdvOfficePagerOfficeStyler1: TAdvOfficePagerOfficeStyler;
    AdvOfficeTabSetOfficeStyler1: TAdvOfficeTabSetOfficeStyler;
    AdvFormStyler1: TAdvFormStyler;
    cmb_Door: TAdvComboBox;
    AdvSmoothLabel1: TAdvSmoothLabel;
    cmb_DoorBuildingCode: TAdvComboBox;
    cmb_CardGubun: TAdvComboBox;
    ed_CardNo: TAdvEdit;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure ed_AddNameKeyPress(Sender: TObject; var Key: Char);
    procedure FormActivate(Sender: TObject);
    procedure ed_nameKeyPress(Sender: TObject; var Key: Char);
    procedure btn_ExcelClick(Sender: TObject);
    procedure btn_PrintClick(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure btn_OptionClick(Sender: TObject);
    procedure btn_OptionCancelClick(Sender: TObject);
    procedure btn_OptionSaveClick(Sender: TObject);
    procedure sg_reportColumnMoved(Sender: TObject; FromIndex,
      ToIndex: Integer);
    procedure btn_SearchClick(Sender: TObject);
    procedure btn_CloseClick(Sender: TObject);
    procedure btn_minimizeClick(Sender: TObject);
    procedure cmb_DoorBuildingCodeChange(Sender: TObject);
    procedure cmb_CardBuildingCodeChange(Sender: TObject);
    procedure cmb_DoorBuildingAreaCodeChange(Sender: TObject);
  private
    L_stMenuID : string;
    L_stCloseCaption : string;
    L_stAllName : string;
    CardGubunCodeList : TStringList;
    CardBuildingCodeList : TStringList;
    CardBuildingAreaCodeList : TStringList;
    DoorBuildingCodeList : TStringList;
    DoorBuildingAreaCodeList : TStringList;
    DoorCodeList : TStringList;
    ReportHeaderNameList : TStringList;
    ReportFieldNameList : TStringList;
    L_nMaxReportColCount : integer;
    L_nShowCount : integer;
    L_arrAccessReportIndexArray:Array of integer; //출입이벤트 리스트 순서 배열
    L_arrRelAccessReportIndexArray:Array of integer; //출입이벤트 실제 위치
    L_arrAccessReportShowTable : Array of integer;  //출입이벤트 조회 항목테이블
    L_arrAccessReportSizeTable : Array of integer;  //출입이벤트 Cell Size
    { Private declarations }
    function AccessReportHeaderNameSetting(aList: TAdvStringGrid):Boolean;
    function AccessReportFieldNameSetting:Boolean;
    procedure ChangeAccessReportIndex(FromIndex,ToIndex:integer);
    Function FormComboBoxInitialize:Boolean;
    Function FormGridInitialize:Boolean;
    Function FormNameSetting:Boolean;
    procedure FontSetting;
    Function MemoryCreate : Boolean;
    Function MemoryFree:Boolean;
    Function SearchReport:Boolean;
    function ReportCellHide(aList:TAdvStringGrid):Boolean;
    function ReportConfigRead:Boolean;
    function ReportHeaderNameSetting:Boolean;
    function WriteIniConfig:Boolean;
  public
    { Public declarations }
    procedure FormChangeEvent(aFormName:integer);
    procedure FormGradeRefresh;
    procedure FormIDSetting(aID:string);
  end;

var
  fmAccessReport: TfmAccessReport;

implementation
uses
  uCommonFunction,
  uCommonVariable,
  uComboBoxCodeLoad,
  uDataBase,
  uDBFunction,
  uDBSelect,
  uFormVariable,
  uMain;

{$R *.dfm}


function TfmAccessReport.AccessReportFieldNameSetting: Boolean;
begin
  ReportFieldNameList.Clear;
  ReportFieldNameList.Add('AE_DATE');
  ReportFieldNameList.Add('AE_TIME');
  ReportFieldNameList.Add('DoorBuildingName');
  ReportFieldNameList.Add('DoorBuildingAreaName');
  ReportFieldNameList.Add('DE_DEVICENAME');
  ReportFieldNameList.Add('CA_GUBUNNAME');
  ReportFieldNameList.Add('CardBuildingName');
  ReportFieldNameList.Add('CardBuildingAreaName');
  ReportFieldNameList.Add('CA_CARDNO');
  ReportFieldNameList.Add('CA_NAME');
  ReportFieldNameList.Add('DE_LOCKMODENAME');
  ReportFieldNameList.Add('AE_EVENTCODENAME');
end;

function TfmAccessReport.AccessReportHeaderNameSetting(aList: TAdvStringGrid): Boolean;
var
  i : integer;
begin
  aList.ColCount := ReportHeaderNameList.Count;
  for i := LOW(L_arrAccessReportIndexArray) to HIGH(L_arrAccessReportIndexArray) do
  begin
    if (aList.ColCount - 1) < i then Exit;
    if (ReportHeaderNameList.Count - 1) < i then Exit;

    aList.cells[L_arrAccessReportIndexArray[i],0] := ReportHeaderNameList[i];
  end;

end;

procedure TfmAccessReport.btn_CloseClick(Sender: TObject);
begin
  inherited;
  Close;
end;

procedure TfmAccessReport.btn_ExcelClick(Sender: TObject);
var
  stRefFileName,stSaveFileName:String;
  stPrintRefPath : string;
  nExcelRowStart:integer;
  ini_fun : TiniFile;
  aFileName : string;
  stTitle : string;
begin
  btn_Excel.Enabled := False;
  aFileName:=Caption;
  SaveDialog1.FileName := aFileName;
  if SaveDialog1.Execute then
  begin
    stSaveFileName := SaveDialog1.FileName;

    if SaveDialog1.FileName <> '' then
    begin
      //sg_Report.SaveToXLS(stSaveFileName,True);
      if fileexists(stSaveFileName) then
        deletefile(stSaveFileName);
      sg_Report.SaveToXLS(stSaveFileName);
//      advgridexcelio1.XLSExport(stSaveFileName);
    end;
  end;
  btn_Excel.Enabled := True;

end;

procedure TfmAccessReport.btn_minimizeClick(Sender: TObject);
begin
  inherited;
  windowState := wsNormal;
end;

procedure TfmAccessReport.btn_OptionCancelClick(Sender: TObject);
begin
  inherited;
  Pan_Option.Visible := False;
end;

procedure TfmAccessReport.btn_OptionClick(Sender: TObject);
var
  i : integer;
begin
  inherited;
  for i := LOW(L_arrAccessReportShowTable) to HIGH(L_arrAccessReportShowTable) do
  begin
    if i < gb_SearchOption.Items.Count then
    begin
      if L_arrAccessReportShowTable[i] = 1 then gb_SearchOption.Checked[i] := True
      else gb_SearchOption.Checked[i] := False;
    end;
  end;
  Pan_Option.Visible := True;
end;

procedure TfmAccessReport.btn_OptionSaveClick(Sender: TObject);
var
  ini_fun : TiniFile;
  i : integer;
begin
  Try
    ini_fun := TiniFile.Create(G_stExeFolder + '\AccessReport.INI');
    with ini_fun do
    begin
      for i := 0 to gb_SearchOption.Items.Count - 1 do
      begin
        if gb_SearchOption.Checked[i] then
        begin
          L_arrAccessReportShowTable[i] := 1;
          WriteInteger('ACCESSREPORT','RelAccessShowArray'+inttostr(i),1);
        end else
        begin
          L_arrAccessReportShowTable[i] := 0;
          WriteInteger('ACCESSREPORT','RelAccessShowArray'+inttostr(i),0);
        end;
      end;
    end;
  Finally
    ini_fun.Free;
  End;
  Pan_Option.Visible := False;
  ReportCellHide(sg_Report);
end;

procedure TfmAccessReport.btn_PrintClick(Sender: TObject);
begin
  sg_Report.Print;
end;

procedure TfmAccessReport.btn_SearchClick(Sender: TObject);
begin
  inherited;
  SearchReport;
end;

procedure TfmAccessReport.ChangeAccessReportIndex(FromIndex, ToIndex: integer);
var
  i : integer;
  nChangData : integer;
begin
  nChangData := L_arrRelAccessReportIndexArray[FromIndex];
  if FromIndex > ToIndex then   //뒤에 있는 놈이 앞으로 오는 경우
  begin
    for i := FromIndex downto ToIndex + 1 do
    begin
      L_arrRelAccessReportIndexArray[i] := L_arrRelAccessReportIndexArray[i - 1];
    end;
    L_arrRelAccessReportIndexArray[ToIndex] := nChangData;
  end else   //앞에 있는 놈이 뒤로 가는 경우
  begin
    for i := FromIndex to ToIndex - 1 do
    begin
      L_arrRelAccessReportIndexArray[i] := L_arrRelAccessReportIndexArray[i + 1];
    end;
    L_arrRelAccessReportIndexArray[ToIndex] := nChangData;
  end;

  for i := LOW(L_arrRelAccessReportIndexArray) to HIGH(L_arrRelAccessReportIndexArray) do
  begin
    L_arrAccessReportIndexArray[L_arrRelAccessReportIndexArray[i]] := i;
  end;

end;

procedure TfmAccessReport.cmb_CardBuildingCodeChange(Sender: TObject);
var
  stBuildingCode : string;
begin
  inherited;
  if cmb_CardBuildingCode.ItemIndex > -1 then
     stBuildingCode := CardBuildingCodeList.Strings[cmb_CardBuildingCode.ItemIndex];
  dmComboBoxCodeLoad.LoadBuildingAreaCode(stBuildingCode,CardBuildingAreaCodeList,TComboBox(cmb_CardBuildingAreaCode),True,'전체');
end;

procedure TfmAccessReport.cmb_DoorBuildingAreaCodeChange(Sender: TObject);
var
  stBuildingCode : string;
  stBuildingAreaCode : string;
begin
  inherited;
  if cmb_DoorBuildingCode.ItemIndex > -1 then
     stBuildingCode := DoorBuildingCodeList.Strings[cmb_DoorBuildingCode.ItemIndex];
  if cmb_DoorBuildingAreaCode.ItemIndex > -1 then
     stBuildingAreaCode := DoorBuildingAreaCodeList.Strings[cmb_DoorBuildingAreaCode.ItemIndex];
  dmComboBoxCodeLoad.LoadDoorCode(stBuildingCode,stBuildingAreaCode,DoorCodeList,TComboBox(cmb_Door),True,'전체');
end;

procedure TfmAccessReport.cmb_DoorBuildingCodeChange(Sender: TObject);
var
  stBuildingCode : string;
begin
  inherited;
  if cmb_DoorBuildingCode.ItemIndex > -1 then
     stBuildingCode := DoorBuildingCodeList.Strings[cmb_DoorBuildingCode.ItemIndex];
  dmComboBoxCodeLoad.LoadBuildingAreaCode(stBuildingCode,DoorBuildingAreaCodeList,TComboBox(cmb_DoorBuildingAreaCode),True,'전체');
  cmb_DoorBuildingAreaCodeChange(cmb_DoorBuildingAreaCode);
end;

procedure TfmAccessReport.ed_AddNameKeyPress(Sender: TObject;
  var Key: Char);
begin
  inherited;
  if Key = #13 then
  begin
    Perform(WM_NEXTDLGCTL,0,0);
  end;
end;

procedure TfmAccessReport.ed_nameKeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
  if Key = #13 then
  begin
    Key := #0;
  end;

end;

procedure TfmAccessReport.FontSetting;
begin
(*  dmFormUtil.TravelFormFontSetting(self,G_stFontName,inttostr(G_nFontSize));
  dmFormUtil.TravelAdvOfficeTabSetOfficeStylerFontSetting(AdvOfficeTabSetOfficeStyler1, G_stFontName,inttostr(G_nFontSize));
  dmFormUtil.FormAdvOfficeTabSetOfficeStylerSetting(AdvOfficeTabSetOfficeStyler1,G_stFormStyle);
  dmFormUtil.FormAdvToolBarOfficeStylerSetting(AdvToolBarOfficeStyler1,G_stFormStyle);
  dmFormUtil.FormStyleSetting(self,AdvToolBarOfficeStyler1);
*)
end;

procedure TfmAccessReport.FormActivate(Sender: TObject);
begin
  inherited;
  WindowState := wsMaximized;
end;

procedure TfmAccessReport.FormChangeEvent(aFormName: integer);
var
  stOldData : string;
  nIndex : integer;
begin
  case aFormName of
    con_FormBuildingAreaCode : begin
      if cmb_DoorBuildingAreaCode.ItemIndex > -1 then
         stOldData := DoorBuildingAreaCodeList.Strings[cmb_DoorBuildingAreaCode.ItemIndex];
      cmb_DoorBuildingCodeChange(cmb_DoorBuildingCode);
      nIndex := DoorBuildingAreaCodeList.IndexOf(stOldData);
      cmb_DoorBuildingAreaCode.ItemIndex := nIndex;

      if cmb_CardBuildingAreaCode.ItemIndex > -1 then
         stOldData := CardBuildingAreaCodeList.Strings[cmb_CardBuildingAreaCode.ItemIndex];
      cmb_CardBuildingCodeChange(cmb_CardBuildingCode);
      nIndex := CardBuildingAreaCodeList.IndexOf(stOldData);
      cmb_CardBuildingAreaCode.ItemIndex := nIndex;
    end;
    con_FormBuildingCode : begin
      if cmb_DoorBuildingCode.ItemIndex > -1 then
         stOldData := DoorBuildingCodeList.Strings[cmb_DoorBuildingCode.ItemIndex];
      dmComboBoxCodeLoad.LoadBuildingCode(DoorBuildingCodeList,TComboBox(cmb_DoorBuildingCode),True,'전체');
      nIndex := DoorBuildingCodeList.IndexOf(stOldData);
      cmb_DoorBuildingCode.ItemIndex := nIndex;
      stOldData := '';
      if cmb_CardBuildingCode.ItemIndex > -1 then
         stOldData := CardBuildingCodeList.Strings[cmb_CardBuildingCode.ItemIndex];
      dmComboBoxCodeLoad.LoadBuildingCode(CardBuildingCodeList,TComboBox(cmb_CardBuildingCode),True,'전체');
      nIndex := CardBuildingCodeList.IndexOf(stOldData);
      cmb_CardBuildingCode.ItemIndex := nIndex;
    end;
    con_FormCardGroup : begin
      if cmb_CardGubun.ItemIndex > -1 then
         stOldData := CardGubunCodeList.Strings[cmb_CardGubun.ItemIndex];
      dmComboBoxCodeLoad.LoadCardGubunCode(CardGubunCodeList,TComboBox(cmb_CardGubun),True,'전체');
      nIndex := CardGubunCodeList.IndexOf(stOldData);
      cmb_CardGubun.ItemIndex := nIndex;
    end;
    con_FormDoorAdmin : begin
      cmb_DoorBuildingAreaCodeChange(cmb_DoorBuildingAreaCode);
    end;

  end;
end;

procedure TfmAccessReport.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  WriteIniConfig;

  fmMain.FORMENABLE(con_FormACCESSREPORT,'FALSE');

  MemoryFree;
  Action := caFree;
end;

function TfmAccessReport.FormComboBoxInitialize: Boolean;
begin


  dmComboBoxCodeLoad.LoadCardGubunCode(CardGubunCodeList,TComboBox(cmb_CardGubun),True,'전체');
  dmComboBoxCodeLoad.LoadBuildingCode(DoorBuildingCodeList,TComboBox(cmb_DoorBuildingCode),True,'전체');
  cmb_DoorBuildingCodeChange(cmb_DoorBuildingCode);
  dmComboBoxCodeLoad.LoadBuildingCode(CardBuildingCodeList,TComboBox(cmb_CardBuildingCode),True,'전체');
  cmb_CardBuildingCodeChange(cmb_CardBuildingCode);

  dmComboBoxCodeLoad.LoadTimeHH(cmb_StartHH);
  cmb_StartHH.ItemIndex := 0;
  dmComboBoxCodeLoad.LoadTimeMM(cmb_StartMM);
  cmb_StartMM.ItemIndex := 0;
  dmComboBoxCodeLoad.LoadTimeHH(cmb_EndHH);
  cmb_EndHH.ItemIndex := 24;
  dmComboBoxCodeLoad.LoadTimeMM(cmb_EndMM);
  cmb_EndMM.ItemIndex := 0;

end;

procedure TfmAccessReport.FormCreate(Sender: TObject);
begin
  dt_StartDate.Date := Now;
  dt_endDate.Date := now;

  MemoryCreate;
  FontSetting;
end;


procedure TfmAccessReport.FormGradeRefresh;
begin
//
end;

function TfmAccessReport.FormGridInitialize: Boolean;
begin
  GridInitialize(sg_Report);
  ReportCellHide(sg_Report);
end;

procedure TfmAccessReport.FormIDSetting(aID: string);
begin
  L_stMenuID := aID;
end;

function TfmAccessReport.FormNameSetting: Boolean;
var
  i : integer;
begin
  ReportHeaderNameSetting;

  L_stCloseCaption := '닫기';
  L_stAllName := '전체';


  gb_SearchOption.Items.Clear;

  for i := 0 to ReportHeaderNameList.Count - 1 do
  begin
    gb_SearchOption.Items.Add(ReportHeaderNameList.Strings[i]);
  end;
end;

procedure TfmAccessReport.FormResize(Sender: TObject);
begin
  inherited;
  pan_Option.Left := (width div 2) - (pan_Option.Width div 2);
  pan_Option.Top := (Height div 2) - (pan_Option.Height div 2);

  btn_OptionSave.Left := pan_Option.Width div 2 - btn_OptionSave.Width  - 5;
  btn_OptionCancel.Left := pan_Option.Width div 2 + 5;

  sg_report.Height := BodyPanel.Height - (btn_Search.Top + btn_Search.Height + 10);
  sg_report.Left := 5;
  sg_report.Width := BodyPanel.Width - (sg_report.Left * 2);
  sg_report.Top := btn_Search.Top + btn_Search.Height + 10;

  btn_Close.Left := AdvOfficePager1.Width - btn_Close.Width - 10;
  btn_minimize.Left := btn_Close.Left - btn_minimize.Width - 2;

  if Windowstate = wsMaximized then
  begin
    btn_minimize.Visible := True;
    btn_Close.Visible := True;
  end else
  begin
    btn_minimize.Visible := False;
    btn_Close.Visible := False;
  end;
end;

procedure TfmAccessReport.FormShow(Sender: TObject);
begin
  fmMain.FORMENABLE(con_FormACCESSREPORT,'TRUE');

  FormNameSetting;
  FormComboBoxInitialize;
  ReportConfigRead;
  FormGridInitialize;
  AccessReportHeaderNameSetting(sg_Report);
  AccessReportFieldNameSetting;
  if Not FileExists(G_stExeFolder + '\Excel-d.png') then
  begin
    ExcelDisImage.Picture.SaveToFile(G_stExeFolder + '\Excel-d.png');
  end;
  btn_Excel.Picture.LoadFromFile(G_stExeFolder + '\Excel-d.png');
end;


function TfmAccessReport.MemoryCreate: Boolean;
begin
  L_nMaxReportColCount := 30;
  L_nShowCount := 0;

  CardGubunCodeList := TStringList.Create;
  CardBuildingCodeList := TStringList.Create;
  CardBuildingAreaCodeList := TStringList.Create;
  DoorBuildingCodeList := TStringList.Create;
  DoorBuildingAreaCodeList := TStringList.Create;
  DoorCodeList := TStringList.Create;
  ReportHeaderNameList := TStringList.Create;
  ReportFieldNameList := TStringList.Create;

  SetLength(L_arrAccessReportIndexArray,L_nMaxReportColCount + 1);
  SetLength(L_arrRelAccessReportIndexArray,L_nMaxReportColCount + 1);
  SetLength(L_arrAccessReportShowTable,L_nMaxReportColCount + 1);
  SetLength(L_arrAccessReportSizeTable,L_nMaxReportColCount + 1);
end;

function TfmAccessReport.MemoryFree: Boolean;
begin
  CardGubunCodeList.Free;
  CardBuildingCodeList.Free;
  CardBuildingAreaCodeList.Free;
  DoorBuildingCodeList.Free;
  DoorBuildingAreaCodeList.Free;
  DoorCodeList.Free;
  ReportHeaderNameList.Free;
  ReportFieldNameList.Free;

  L_arrAccessReportIndexArray := nil;
  Finalize(L_arrAccessReportIndexArray);
  L_arrRelAccessReportIndexArray := nil;
  Finalize(L_arrRelAccessReportIndexArray);
  L_arrAccessReportShowTable := nil;
  Finalize(L_arrAccessReportShowTable);
  L_arrAccessReportSizeTable := nil;
  Finalize(L_arrAccessReportSizeTable);
end;

function TfmAccessReport.ReportCellHide(aList: TAdvStringGrid): Boolean;
var
  i : integer;
begin
  for i := 0 to aList.ColCount - 1 do
  begin
    if L_arrAccessReportShowTable[i] = 0 then
    begin
      aList.ColWidths[L_arrAccessReportIndexArray[i]] := 0;
    end else
    begin
      if L_arrAccessReportSizeTable[L_arrAccessReportIndexArray[i]] <> 0 then aList.ColWidths[L_arrAccessReportIndexArray[i]] := L_arrAccessReportSizeTable[L_arrAccessReportIndexArray[i]]
      else aList.ColWidths[L_arrAccessReportIndexArray[i]] := 200;
    end;
  end;
end;

function TfmAccessReport.ReportConfigRead: Boolean;
var
  ini_fun : TiniFile;
  nShowCount : integer;
  nSize : integer;
  i : integer;
begin
  L_nShowCount := 0;
  ini_fun := TiniFile.Create(G_stExeFolder + '\AccessReport.INI');
  Try
    with ini_fun do
    begin
      for i := LOW(L_arrAccessReportIndexArray) to HIGH(L_arrAccessReportIndexArray) do
      begin
        L_arrAccessReportIndexArray[i] := ReadInteger('ACCESSREPORT','AccessIndexArray'+inttostr(i),i);
      end;
      for i := LOW(L_arrRelAccessReportIndexArray) to HIGH(L_arrRelAccessReportIndexArray) do
      begin
        L_arrRelAccessReportIndexArray[i] := ReadInteger('ACCESSREPORT','RelAccessIndexArray'+inttostr(i),i);
      end;
      for i := LOW(L_arrAccessReportShowTable) to HIGH(L_arrAccessReportShowTable) do
      begin
        L_arrAccessReportShowTable[i] := ReadInteger('ACCESSREPORT','RelAccessShowArray'+inttostr(i),1);
        L_nShowCount := L_nShowCount + L_arrAccessReportShowTable[i];
      end;
      nSize := 200;
      for i := LOW(L_arrAccessReportSizeTable) to HIGH(L_arrAccessReportSizeTable) do
      begin
        L_arrAccessReportSizeTable[i] := ReadInteger('ACCESSREPORT','RelAccessSizeArray'+inttostr(i),nSize);
      end;
    end;
  Finally
    ini_fun.Free;
  End;

end;

function TfmAccessReport.ReportHeaderNameSetting: Boolean;
begin
(*날짜
시간
출입문위치(동)
출입문위치(출구)
출입문
사용자구분
사용자위치(동)
사용자위치(출구)
카드번호
사용자명
출입문모드
출입승인상태*)

  ReportHeaderNameList.Clear;
  ReportHeaderNameList.Add('날짜');
  ReportHeaderNameList.Add('시간');
  ReportHeaderNameList.Add('출입문위치(동)');
  ReportHeaderNameList.Add('출입문위치(출구)');
  ReportHeaderNameList.Add('출입문');
  ReportHeaderNameList.Add('사용자구분');
  ReportHeaderNameList.Add('사용자위치(동)');
  ReportHeaderNameList.Add('사용자위치(출구)');
  ReportHeaderNameList.Add('카드번호');
  ReportHeaderNameList.Add('사용자명');
  ReportHeaderNameList.Add('출입문모드');
  ReportHeaderNameList.Add('출입승인상태');

  result := True;
end;

function TfmAccessReport.SearchReport: Boolean;
var
  stStartDate : string;
  stStartTime : string;
  stEndDate : string;
  stEndTime : string;
  stCardGubunCode : string;
  stCardBuildingCode : string;
  stCardBuildingAreaCode : string;
  stDoorBuildingCode : string;
  stDoorBuildingAreaCode : string;
  stDoorSeq : string;
  stSql : string;
  TempAdoQuery : TADOQuery;
  nRow : integer;
  i : integer;
  stTemp : string;
begin
  stStartDate := FormatDateTime('yyyymmdd',dt_StartDate.Date);
  stEndDate := FormatDateTime('yyyymmdd',dt_EndDate.Date);
  stStartTime := FillZeroStrNum(cmb_StartHH.Text,2) + FillZeroStrNum(cmb_StartMM.Text,2);
  stEndTime := FillZeroStrNum(cmb_EndHH.Text,2) + FillZeroStrNum(cmb_EndMM.Text,2);
  if cmb_CardGubun.ItemIndex > -1 then
    stCardGubunCode := CardGubunCodeList.Strings[cmb_CardGubun.ItemIndex];
  if cmb_CardBuildingCode.ItemIndex > -1 then
    stCardBuildingCode := CardBuildingCodeList.Strings[cmb_CardBuildingCode.ItemIndex];
  if cmb_CardBuildingAreaCode.ItemIndex > -1 then
    stCardBuildingAreaCode := CardBuildingAreaCodeList.Strings[cmb_CardBuildingAreaCode.ItemIndex];
  if cmb_DoorBuildingCode.ItemIndex > -1 then
    stDoorBuildingCode := DoorBuildingCodeList.Strings[cmb_DoorBuildingCode.ItemIndex];
  if cmb_DoorBuildingAreaCode.ItemIndex > -1 then
    stDoorBuildingAreaCode := DoorBuildingAreaCodeList.Strings[cmb_DoorBuildingAreaCode.ItemIndex];
  if cmb_Door.ItemIndex > -1 then
    stDoorSeq := DoorCodeList.Strings[cmb_Door.ItemIndex];

  stSql :=  dmDBSelect.SelectTB_ACCESSEVENT_AccessReport(stStartDate, stStartTime,
            stEndDate, stEndTime, stDoorBuildingCode, stDoorBuildingAreaCode, stDoorSeq, stCardGubunCode, stCardBuildingCode,
            stCardBuildingAreaCode, ed_CardNo.Text, ed_name.Text);


  btn_Excel.Enabled := False;
  if Not FileExists(G_stExeFolder + '\Excel-d.png') then
  begin
    ExcelDisImage.Picture.SaveToFile(G_stExeFolder + '\Excel-d.png');
  end;
  btn_Excel.Picture.LoadFromFile(G_stExeFolder + '\Excel-d.png');
  btn_Print.Enabled := False;
  GridInitialize(sg_Report);
  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      sql.Text := stSql;
      Try
        Open;
      Except
        Exit;
      End;
      if recordcount < 1 then Exit;
      btn_Excel.Enabled := True;
      if Not FileExists(G_stExeFolder + '\Excel-a.png') then
      begin
        ExcelEnImage.Picture.SaveToFile(G_stExeFolder + '\Excel-a.png');
      end;
      btn_Excel.Picture.LoadFromFile(G_stExeFolder + '\Excel-a.png');
      btn_Print.Enabled := True;
      with sg_Report do
      begin
        nRow := 1;
        RowCount := RecordCount + 1;
        while Not Eof do
        begin
          for i := 0 to ReportFieldNameList.Count - 1 do
          begin
            stTemp := FindField(ReportFieldNameList.Strings[i]).AsString;
            if ReportFieldNameList.Strings[i] = 'AE_DATE' then stTemp := MakeDatetimeStr(stTemp)
            else if ReportFieldNameList.Strings[i] = 'AE_TIME' then stTemp := MaketimeStr(stTemp);
            cells[L_arrAccessReportIndexArray[i],nRow] := stTemp;
          end;
          if G_nEmployeeRelayType = 1 then
          begin
            if FindField('EM_GRADETYPE').AsString = '3' then RowColor[nRow] := G_nColorEmployee //$00EACAB6     //개인별
            else if FindField('EM_GRADETYPE').AsString = '2' then RowColor[nRow] := G_nColorEmGroup //$00EACAB6  //그룹별
            else RowColor[nRow] := G_nColorCompany;
          end;

          nRow := nRow + 1;
          Next;
        end;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;

  result := True;
end;

procedure TfmAccessReport.sg_reportColumnMoved(Sender: TObject; FromIndex,
  ToIndex: Integer);
begin
  inherited;
  ChangeAccessReportIndex(FromIndex,ToIndex);

end;

function TfmAccessReport.WriteIniConfig: Boolean;
var
  ini_fun : TiniFile;
  i : integer;
begin
  ini_fun := TiniFile.Create(G_stExeFolder + '\AccessReport.INI');
  Try
    with ini_fun do
    begin
      for i := LOW(L_arrAccessReportIndexArray) to HIGH(L_arrAccessReportIndexArray) do
      begin
        WriteInteger('ACCESSREPORT','AccessIndexArray'+inttostr(i),L_arrAccessReportIndexArray[i]);
      end;
      for i := LOW(L_arrRelAccessReportIndexArray) to HIGH(L_arrRelAccessReportIndexArray) do
      begin
        WriteInteger('ACCESSREPORT','RelAccessIndexArray'+inttostr(i),L_arrRelAccessReportIndexArray[i]);
      end;
      for i := 0 to sg_Report.ColCount - 1 do
      begin
        if i > HIGH(L_arrAccessReportSizeTable) then break;

        L_arrAccessReportSizeTable[i] := sg_Report.ColWidths[i];
        WriteInteger('ACCESSREPORT','RelAccessSizeArray' + inttostr(i),sg_Report.ColWidths[i]);
      end;
    end;
  Finally
    ini_fun.Free;
  End;
end;

initialization
  RegisterClass(TfmAccessReport);
Finalization
  UnRegisterClass(TfmAccessReport);

end.
